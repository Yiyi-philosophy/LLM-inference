<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="294.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="277" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="277" > </text>
<g id="frames">
<g >
<title>functional.py:2515:layer_norm (33,620,032 bytes, 0.86%)</title><rect x="684.4" y="53" width="10.1" height="15.0" fill="rgb(234,7,34)" rx="2" ry="2" />
<text  x="687.37" y="63.5" ></text>
</g>
<g >
<title>active_allocated (8,528,384 bytes, 0.22%)</title><rect x="10.0" y="213" width="2.6" height="15.0" fill="rgb(233,167,9)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>runpy.py:87:_run_code (8,527,984 bytes, 0.22%)</title><rect x="10.0" y="181" width="2.6" height="15.0" fill="rgb(227,145,43)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>flex_opt.py:1038:generation_loop_overlap_single_batch (16,797,058 bytes, 0.43%)</title><rect x="165.4" y="117" width="5.0" height="15.0" fill="rgb(241,178,14)" rx="2" ry="2" />
<text  x="168.35" y="127.5" ></text>
</g>
<g >
<title>pytorch_backend.py:138:copy (33,558,528 bytes, 0.86%)</title><rect x="1179.9" y="53" width="10.1" height="15.0" fill="rgb(245,134,44)" rx="2" ry="2" />
<text  x="1182.90" y="63.5" ></text>
</g>
<g >
<title>flex_opt.py:802:compute_layer (16,797,058 bytes, 0.43%)</title><rect x="165.4" y="101" width="5.0" height="15.0" fill="rgb(239,95,9)" rx="2" ry="2" />
<text  x="168.35" y="111.5" ></text>
</g>
<g >
<title>flex_opt.py:459:forward (6,309,122 bytes, 0.16%)</title><rect x="166.0" y="85" width="1.9" height="15.0" fill="rgb(242,208,30)" rx="2" ry="2" />
<text  x="168.98" y="95.5" ></text>
</g>
<g >
<title>pytorch_backend.py:190:allocate (50,331,648 bytes, 1.28%)</title><rect x="135.1" y="69" width="15.1" height="15.0" fill="rgb(223,115,26)" rx="2" ry="2" />
<text  x="138.06" y="79.5" ></text>
</g>
<g >
<title>functional.py:2515:layer_norm (2,099,200 bytes, 0.05%)</title><rect x="165.4" y="53" width="0.6" height="15.0" fill="rgb(220,179,50)" rx="2" ry="2" />
<text  x="168.35" y="63.5" ></text>
</g>
<g >
<title>pytorch_backend.py:294:init_cache_one_gpu_batch (50,331,648 bytes, 1.28%)</title><rect x="135.1" y="85" width="15.1" height="15.0" fill="rgb(248,64,22)" rx="2" ry="2" />
<text  x="138.06" y="95.5" ></text>
</g>
<g >
<title>pytorch_backend.py:145:smart_copy (8,392,704 bytes, 0.21%)</title><rect x="1162.2" y="69" width="2.5" height="15.0" fill="rgb(217,108,22)" rx="2" ry="2" />
<text  x="1165.22" y="79.5" ></text>
</g>
<g >
<title>pytorch_backend.py:324:mha (33,554,432 bytes, 0.86%)</title><rect x="942.8" y="69" width="10.1" height="15.0" fill="rgb(249,28,12)" rx="2" ry="2" />
<text  x="945.80" y="79.5" ></text>
</g>
<g >
<title>flex_opt.py:1237:run_flexgen (8,519,680 bytes, 0.22%)</title><rect x="10.0" y="149" width="2.6" height="15.0" fill="rgb(252,169,41)" rx="2" ry="2" />
<text  x="13.00" y="159.5" ></text>
</g>
<g >
<title>pytorch_backend.py:273:opt_output_embed (2,099,200 bytes, 0.05%)</title><rect x="165.4" y="69" width="0.6" height="15.0" fill="rgb(218,144,25)" rx="2" ry="2" />
<text  x="168.35" y="79.5" ></text>
</g>
<g >
<title>pytorch_backend.py:294:init_cache_one_gpu_batch (854,065,152 bytes, 21.78%)</title><rect x="170.4" y="85" width="257.0" height="15.0" fill="rgb(232,182,3)" rx="2" ry="2" />
<text  x="173.41" y="95.5" >pytorch_backend.py:294:init_cache_..</text>
</g>
<g >
<title>inactive (3,432,898,048 bytes, 87.54%)</title><rect x="12.6" y="213" width="1032.9" height="15.0" fill="rgb(225,206,39)" rx="2" ry="2" />
<text  x="15.57" y="223.5" >inactive</text>
</g>
<g >
<title>runpy.py:87:_run_code (323,407,872 bytes, 8.25%)</title><rect x="1092.7" y="181" width="97.3" height="15.0" fill="rgb(234,229,38)" rx="2" ry="2" />
<text  x="1095.69" y="191.5" >runpy.py:87..</text>
</g>
<g >
<title>pytorch_backend.py:190:allocate (854,065,152 bytes, 21.78%)</title><rect x="427.4" y="69" width="257.0" height="15.0" fill="rgb(206,87,45)" rx="2" ry="2" />
<text  x="430.39" y="79.5" >pytorch_backend.py:190:allocate</text>
</g>
<g >
<title>pytorch_backend.py:315:mha (8,519,680 bytes, 0.22%)</title><rect x="10.0" y="69" width="2.6" height="15.0" fill="rgb(252,96,51)" rx="2" ry="2" />
<text  x="13.00" y="79.5" ></text>
</g>
<g >
<title>pytorch_backend.py:138:copy (8,388,608 bytes, 0.21%)</title><rect x="1157.2" y="53" width="2.5" height="15.0" fill="rgb(223,94,11)" rx="2" ry="2" />
<text  x="1160.17" y="63.5" ></text>
</g>
<g >
<title>pytorch_backend.py:328:mha (2,097,152 bytes, 0.05%)</title><rect x="166.6" y="69" width="0.6" height="15.0" fill="rgb(234,119,26)" rx="2" ry="2" />
<text  x="169.61" y="79.5" ></text>
</g>
<g >
<title>pytorch_backend.py:190:allocate (8,388,608 bytes, 0.21%)</title><rect x="1092.7" y="37" width="2.5" height="15.0" fill="rgb(208,141,5)" rx="2" ry="2" />
<text  x="1095.69" y="47.5" ></text>
</g>
<g >
<title>pytorch_backend.py:190:allocate (16,781,312 bytes, 0.43%)</title><rect x="1164.7" y="37" width="5.1" height="15.0" fill="rgb(210,171,31)" rx="2" ry="2" />
<text  x="1167.75" y="47.5" ></text>
</g>
<g >
<title>flex_opt.py:348:init_cache_one_gpu_batch (1,708,130,304 bytes, 43.56%)</title><rect x="170.4" y="101" width="514.0" height="15.0" fill="rgb(210,48,21)" rx="2" ry="2" />
<text  x="173.41" y="111.5" >flex_opt.py:348:init_cache_one_gpu_batch</text>
</g>
<g >
<title>flex_opt.py:1035:generation_loop_overlap_single_batch (8,388,608 bytes, 0.21%)</title><rect x="1092.7" y="117" width="2.5" height="15.0" fill="rgb(205,6,29)" rx="2" ry="2" />
<text  x="1095.69" y="127.5" ></text>
</g>
<g >
<title>flex_opt.py:459:forward (171,966,464 bytes, 4.39%)</title><rect x="942.8" y="85" width="51.7" height="15.0" fill="rgb(234,8,17)" rx="2" ry="2" />
<text  x="945.80" y="95.5" >flex_..</text>
</g>
<g >
<title>pytorch_backend.py:138:copy (16,781,312 bytes, 0.43%)</title><rect x="1164.7" y="53" width="5.1" height="15.0" fill="rgb(213,141,44)" rx="2" ry="2" />
<text  x="1167.75" y="63.5" ></text>
</g>
<g >
<title>pytorch_backend.py:578:mlp (134,479,872 bytes, 3.43%)</title><rect x="994.6" y="69" width="40.5" height="15.0" fill="rgb(225,196,2)" rx="2" ry="2" />
<text  x="997.60" y="79.5" >pyt..</text>
</g>
<g >
<title>pytorch_backend.py:190:allocate (8,392,704 bytes, 0.21%)</title><rect x="1162.2" y="37" width="2.5" height="15.0" fill="rgb(226,225,15)" rx="2" ry="2" />
<text  x="1165.22" y="47.5" ></text>
</g>
<g >
<title>flex_opt.py:272:forward (2,099,328 bytes, 0.05%)</title><rect x="165.4" y="85" width="0.6" height="15.0" fill="rgb(224,118,49)" rx="2" ry="2" />
<text  x="168.35" y="95.5" ></text>
</g>
<g >
<title>flex_opt.py:802:compute_layer (1,200,196,800 bytes, 30.60%)</title><rect x="684.4" y="101" width="361.1" height="15.0" fill="rgb(223,72,4)" rx="2" ry="2" />
<text  x="687.37" y="111.5" >flex_opt.py:802:compute_layer</text>
</g>
<g >
<title>flex_opt.py:691:init_cache (100,663,296 bytes, 2.57%)</title><rect x="135.1" y="117" width="30.3" height="15.0" fill="rgb(251,30,41)" rx="2" ry="2" />
<text  x="138.06" y="127.5" >fl..</text>
</g>
<g >
<title>stream_0 (3,441,426,432 bytes, 87.75%)</title><rect x="10.0" y="229" width="1035.5" height="15.0" fill="rgb(221,133,30)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >stream_0</text>
</g>
<g >
<title>flex_opt.py:1237:run_flexgen (8,388,608 bytes, 0.21%)</title><rect x="1092.7" y="149" width="2.5" height="15.0" fill="rgb(231,166,39)" rx="2" ry="2" />
<text  x="1095.69" y="159.5" ></text>
</g>
<g >
<title>flex_opt.py:901:generate (1,200,196,800 bytes, 30.60%)</title><rect x="684.4" y="133" width="361.1" height="15.0" fill="rgb(252,72,26)" rx="2" ry="2" />
<text  x="687.37" y="143.5" >flex_opt.py:901:generate</text>
</g>
<g >
<title>pytorch_backend.py:190:allocate (33,570,816 bytes, 0.86%)</title><rect x="1169.8" y="37" width="10.1" height="15.0" fill="rgb(251,140,1)" rx="2" ry="2" />
<text  x="1172.80" y="47.5" ></text>
</g>
<g >
<title>pytorch_backend.py:295:init_cache_one_gpu_batch (50,331,648 bytes, 1.28%)</title><rect x="150.2" y="85" width="15.2" height="15.0" fill="rgb(237,46,21)" rx="2" ry="2" />
<text  x="153.21" y="95.5" ></text>
</g>
<g >
<title>flex_opt.py:516:load_weight (33,570,816 bytes, 0.86%)</title><rect x="1169.8" y="85" width="10.1" height="15.0" fill="rgb(239,77,33)" rx="2" ry="2" />
<text  x="1172.80" y="95.5" ></text>
</g>
<g >
<title>flex_opt.py:802:compute_layer (8,519,680 bytes, 0.22%)</title><rect x="10.0" y="101" width="2.6" height="15.0" fill="rgb(236,27,21)" rx="2" ry="2" />
<text  x="13.00" y="111.5" ></text>
</g>
<g >
<title>&lt;gaps&gt; (156,839,936 bytes, 4.00%)</title><rect x="1045.5" y="197" width="47.2" height="15.0" fill="rgb(205,133,30)" rx="2" ry="2" />
<text  x="1048.50" y="207.5" >&lt;gaps&gt;</text>
</g>
<g >
<title>flex_opt.py:328:load_weight (8,388,608 bytes, 0.21%)</title><rect x="1092.7" y="85" width="2.5" height="15.0" fill="rgb(253,83,43)" rx="2" ry="2" />
<text  x="1095.69" y="95.5" ></text>
</g>
<g >
<title>flex_opt.py:677:load_weight (315,019,264 bytes, 8.03%)</title><rect x="1095.2" y="101" width="94.8" height="15.0" fill="rgb(224,1,49)" rx="2" ry="2" />
<text  x="1098.21" y="111.5" >flex_opt.py..</text>
</g>
<g >
<title>flex_opt.py:901:generate (8,519,680 bytes, 0.22%)</title><rect x="10.0" y="133" width="2.6" height="15.0" fill="rgb(254,202,28)" rx="2" ry="2" />
<text  x="13.00" y="143.5" ></text>
</g>
<g >
<title>pytorch_backend.py:273:opt_output_embed (33,620,032 bytes, 0.86%)</title><rect x="684.4" y="69" width="10.1" height="15.0" fill="rgb(216,50,47)" rx="2" ry="2" />
<text  x="687.37" y="79.5" ></text>
</g>
<g >
<title>&lt;gaps&gt; (407,110,078 bytes, 10.38%)</title><rect x="12.6" y="197" width="122.5" height="15.0" fill="rgb(212,41,13)" rx="2" ry="2" />
<text  x="15.57" y="207.5" >&lt;gaps&gt;</text>
</g>
<g >
<title>pytorch_backend.py:190:allocate (8,388,608 bytes, 0.21%)</title><rect x="1159.7" y="37" width="2.5" height="15.0" fill="rgb(246,195,23)" rx="2" ry="2" />
<text  x="1162.70" y="47.5" ></text>
</g>
<g >
<title>pytorch_backend.py:295:init_cache_one_gpu_batch (854,065,152 bytes, 21.78%)</title><rect x="427.4" y="85" width="257.0" height="15.0" fill="rgb(248,17,2)" rx="2" ry="2" />
<text  x="430.39" y="95.5" >pytorch_backend.py:295:init_cache_..</text>
</g>
<g >
<title>pytorch_backend.py:580:mlp (34,668,544 bytes, 0.88%)</title><rect x="1035.1" y="69" width="10.4" height="15.0" fill="rgb(237,16,24)" rx="2" ry="2" />
<text  x="1038.07" y="79.5" ></text>
</g>
<g >
<title>flex_opt.py:889:generate (1,708,130,304 bytes, 43.56%)</title><rect x="170.4" y="133" width="514.0" height="15.0" fill="rgb(215,158,10)" rx="2" ry="2" />
<text  x="173.41" y="143.5" >flex_opt.py:889:generate</text>
</g>
<g >
<title>flex_opt.py:272:forward (858,885,312 bytes, 21.90%)</title><rect x="684.4" y="85" width="258.4" height="15.0" fill="rgb(232,226,12)" rx="2" ry="2" />
<text  x="687.37" y="95.5" >flex_opt.py:272:forward</text>
</g>
<g >
<title>pytorch_backend.py:145:smart_copy (205,914,112 bytes, 5.25%)</title><rect x="1095.2" y="69" width="62.0" height="15.0" fill="rgb(246,173,21)" rx="2" ry="2" />
<text  x="1098.22" y="79.5" >pytorc..</text>
</g>
<g >
<title>flex_opt.py:901:generate (16,797,570 bytes, 0.43%)</title><rect x="165.4" y="133" width="5.0" height="15.0" fill="rgb(224,76,15)" rx="2" ry="2" />
<text  x="168.35" y="143.5" ></text>
</g>
<g >
<title>flex_opt.py:348:init_cache_one_gpu_batch (100,663,296 bytes, 2.57%)</title><rect x="135.1" y="101" width="30.3" height="15.0" fill="rgb(250,51,52)" rx="2" ry="2" />
<text  x="138.06" y="111.5" >fl..</text>
</g>
<g >
<title>flex_opt.py:330:load_weight (8,392,704 bytes, 0.21%)</title><rect x="1162.2" y="85" width="2.5" height="15.0" fill="rgb(224,85,53)" rx="2" ry="2" />
<text  x="1165.22" y="95.5" ></text>
</g>
<g >
<title>pytorch_backend.py:190:allocate (8,388,608 bytes, 0.21%)</title><rect x="1157.2" y="37" width="2.5" height="15.0" fill="rgb(233,119,53)" rx="2" ry="2" />
<text  x="1160.17" y="47.5" ></text>
</g>
<g >
<title>flex_opt.py:247:load_weight (205,914,112 bytes, 5.25%)</title><rect x="1095.2" y="85" width="62.0" height="15.0" fill="rgb(249,39,54)" rx="2" ry="2" />
<text  x="1098.22" y="95.5" >flex_o..</text>
</g>
<g >
<title>flex_opt.py:517:load_weight (33,558,528 bytes, 0.86%)</title><rect x="1179.9" y="85" width="10.1" height="15.0" fill="rgb(252,145,2)" rx="2" ry="2" />
<text  x="1182.90" y="95.5" ></text>
</g>
<g >
<title>flex_opt.py:901:generate (315,019,264 bytes, 8.03%)</title><rect x="1095.2" y="133" width="94.8" height="15.0" fill="rgb(227,53,5)" rx="2" ry="2" />
<text  x="1098.21" y="143.5" >flex_opt.py..</text>
</g>
<g >
<title>stream_125496928 (480,247,808 bytes, 12.25%)</title><rect x="1045.5" y="229" width="144.5" height="15.0" fill="rgb(237,154,40)" rx="2" ry="2" />
<text  x="1048.50" y="239.5" >stream_125496928</text>
</g>
<g >
<title>flex_opt.py:1035:generation_loop_overlap_single_batch (315,019,264 bytes, 8.03%)</title><rect x="1095.2" y="117" width="94.8" height="15.0" fill="rgb(215,56,52)" rx="2" ry="2" />
<text  x="1098.21" y="127.5" >flex_opt.py..</text>
</g>
<g >
<title>pytorch_backend.py:190:allocate (205,914,112 bytes, 5.25%)</title><rect x="1095.2" y="37" width="62.0" height="15.0" fill="rgb(228,106,16)" rx="2" ry="2" />
<text  x="1098.22" y="47.5" >pytorc..</text>
</g>
<g >
<title>flex_opt.py:1237:run_flexgen (117,460,866 bytes, 3.00%)</title><rect x="135.1" y="149" width="35.3" height="15.0" fill="rgb(241,217,28)" rx="2" ry="2" />
<text  x="138.06" y="159.5" >fl..</text>
</g>
<g >
<title>flex_opt.py:691:init_cache (1,708,130,304 bytes, 43.56%)</title><rect x="170.4" y="117" width="514.0" height="15.0" fill="rgb(228,214,18)" rx="2" ry="2" />
<text  x="173.41" y="127.5" >flex_opt.py:691:init_cache</text>
</g>
<g >
<title>pytorch_backend.py:145:smart_copy (8,388,608 bytes, 0.21%)</title><rect x="1157.2" y="69" width="2.5" height="15.0" fill="rgb(211,22,31)" rx="2" ry="2" />
<text  x="1160.17" y="79.5" ></text>
</g>
<g >
<title>pytorch_backend.py:190:allocate (33,558,528 bytes, 0.86%)</title><rect x="1179.9" y="37" width="10.1" height="15.0" fill="rgb(211,38,9)" rx="2" ry="2" />
<text  x="1182.90" y="47.5" ></text>
</g>
<g >
<title>flex_opt.py:328:load_weight (8,388,608 bytes, 0.21%)</title><rect x="1157.2" y="85" width="2.5" height="15.0" fill="rgb(236,9,25)" rx="2" ry="2" />
<text  x="1160.17" y="95.5" ></text>
</g>
<g >
<title>pytorch_backend.py:328:mha (33,554,432 bytes, 0.86%)</title><rect x="963.0" y="69" width="10.1" height="15.0" fill="rgb(233,159,26)" rx="2" ry="2" />
<text  x="965.99" y="79.5" ></text>
</g>
<g >
<title>flex_opt.py:331:load_weight (16,781,312 bytes, 0.43%)</title><rect x="1164.7" y="85" width="5.1" height="15.0" fill="rgb(249,198,33)" rx="2" ry="2" />
<text  x="1167.75" y="95.5" ></text>
</g>
<g >
<title>pytorch_backend.py:346:mha (33,554,432 bytes, 0.86%)</title><rect x="974.4" y="69" width="10.0" height="15.0" fill="rgb(236,74,24)" rx="2" ry="2" />
<text  x="977.35" y="79.5" ></text>
</g>
<g >
<title>runpy.py:87:_run_code (3,025,787,970 bytes, 77.16%)</title><rect x="135.1" y="181" width="910.4" height="15.0" fill="rgb(224,99,7)" rx="2" ry="2" />
<text  x="138.06" y="191.5" >runpy.py:87:_run_code</text>
</g>
<g >
<title>pytorch_backend.py:145:smart_copy (16,781,312 bytes, 0.43%)</title><rect x="1164.7" y="69" width="5.1" height="15.0" fill="rgb(207,203,36)" rx="2" ry="2" />
<text  x="1167.75" y="79.5" ></text>
</g>
<g >
<title>flex_opt.py:901:generate (8,388,608 bytes, 0.21%)</title><rect x="1092.7" y="133" width="2.5" height="15.0" fill="rgb(226,203,0)" rx="2" ry="2" />
<text  x="1095.69" y="143.5" ></text>
</g>
<g >
<title>flex_opt.py:677:load_weight (8,388,608 bytes, 0.21%)</title><rect x="1092.7" y="101" width="2.5" height="15.0" fill="rgb(227,183,3)" rx="2" ry="2" />
<text  x="1095.69" y="111.5" ></text>
</g>
<g >
<title>flex_opt.py:1348:&lt;module&gt; (323,407,872 bytes, 8.25%)</title><rect x="1092.7" y="165" width="97.3" height="15.0" fill="rgb(219,130,27)" rx="2" ry="2" />
<text  x="1095.69" y="175.5" >flex_opt.py..</text>
</g>
<g >
<title>pytorch_backend.py:326:mha (33,554,432 bytes, 0.86%)</title><rect x="952.9" y="69" width="10.1" height="15.0" fill="rgb(214,138,10)" rx="2" ry="2" />
<text  x="955.90" y="79.5" ></text>
</g>
<g >
<title>pytorch_backend.py:324:mha (2,097,152 bytes, 0.05%)</title><rect x="166.0" y="69" width="0.6" height="15.0" fill="rgb(252,174,46)" rx="2" ry="2" />
<text  x="168.98" y="79.5" ></text>
</g>
<g >
<title>pytorch_backend.py:277:opt_output_embed (825,265,152 bytes, 21.04%)</title><rect x="694.5" y="69" width="248.3" height="15.0" fill="rgb(214,186,12)" rx="2" ry="2" />
<text  x="697.48" y="79.5" >pytorch_backend.py:277:opt_output..</text>
</g>
<g >
<title>pytorch_backend.py:336:mha (4,194,304 bytes, 0.11%)</title><rect x="973.1" y="69" width="1.3" height="15.0" fill="rgb(217,170,48)" rx="2" ry="2" />
<text  x="976.09" y="79.5" ></text>
</g>
<g >
<title>pytorch_backend.py:346:mha (2,097,152 bytes, 0.05%)</title><rect x="167.3" y="69" width="0.6" height="15.0" fill="rgb(215,204,40)" rx="2" ry="2" />
<text  x="170.25" y="79.5" ></text>
</g>
<g >
<title>flex_opt.py:329:load_weight (8,388,608 bytes, 0.21%)</title><rect x="1159.7" y="85" width="2.5" height="15.0" fill="rgb(213,122,41)" rx="2" ry="2" />
<text  x="1162.70" y="95.5" ></text>
</g>
<g >
<title>flex_opt.py:1242:run_flexgen (2,908,327,104 bytes, 74.16%)</title><rect x="170.4" y="149" width="875.1" height="15.0" fill="rgb(243,79,1)" rx="2" ry="2" />
<text  x="173.41" y="159.5" >flex_opt.py:1242:run_flexgen</text>
</g>
<g >
<title>pytorch_backend.py:138:copy (205,914,112 bytes, 5.25%)</title><rect x="1095.2" y="53" width="62.0" height="15.0" fill="rgb(224,152,8)" rx="2" ry="2" />
<text  x="1098.22" y="63.5" >pytorc..</text>
</g>
<g >
<title>runpy.py:197:_run_module_as_main (8,527,984 bytes, 0.22%)</title><rect x="10.0" y="197" width="2.6" height="15.0" fill="rgb(206,82,50)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>pytorch_backend.py:190:allocate (854,065,152 bytes, 21.78%)</title><rect x="170.4" y="69" width="257.0" height="15.0" fill="rgb(231,193,43)" rx="2" ry="2" />
<text  x="173.41" y="79.5" >pytorch_backend.py:190:allocate</text>
</g>
<g >
<title>pytorch_backend.py:138:copy (33,570,816 bytes, 0.86%)</title><rect x="1169.8" y="53" width="10.1" height="15.0" fill="rgb(206,48,39)" rx="2" ry="2" />
<text  x="1172.80" y="63.5" ></text>
</g>
<g >
<title>runpy.py:197:_run_module_as_main (3,025,787,970 bytes, 77.16%)</title><rect x="135.1" y="197" width="910.4" height="15.0" fill="rgb(244,126,22)" rx="2" ry="2" />
<text  x="138.06" y="207.5" >runpy.py:197:_run_module_as_main</text>
</g>
<g >
<title>flex_opt.py:1038:generation_loop_overlap_single_batch (8,519,680 bytes, 0.22%)</title><rect x="10.0" y="117" width="2.6" height="15.0" fill="rgb(242,159,48)" rx="2" ry="2" />
<text  x="13.00" y="127.5" ></text>
</g>
<g >
<title>flex_opt.py:459:forward (8,519,680 bytes, 0.22%)</title><rect x="10.0" y="85" width="2.6" height="15.0" fill="rgb(241,94,19)" rx="2" ry="2" />
<text  x="13.00" y="95.5" ></text>
</g>
<g >
<title>pytorch_backend.py:578:mlp (8,388,608 bytes, 0.21%)</title><rect x="167.9" y="69" width="2.5" height="15.0" fill="rgb(231,14,19)" rx="2" ry="2" />
<text  x="170.88" y="79.5" ></text>
</g>
<g >
<title>pytorch_backend.py:145:smart_copy (33,570,816 bytes, 0.86%)</title><rect x="1169.8" y="69" width="10.1" height="15.0" fill="rgb(222,39,9)" rx="2" ry="2" />
<text  x="1172.80" y="79.5" ></text>
</g>
<g >
<title>flex_opt.py:545:forward (169,148,416 bytes, 4.31%)</title><rect x="994.6" y="85" width="50.9" height="15.0" fill="rgb(251,70,52)" rx="2" ry="2" />
<text  x="997.60" y="95.5" >flex_..</text>
</g>
<g >
<title>flex_opt.py:1242:run_flexgen (315,019,264 bytes, 8.03%)</title><rect x="1095.2" y="149" width="94.8" height="15.0" fill="rgb(253,202,46)" rx="2" ry="2" />
<text  x="1098.21" y="159.5" >flex_opt.py..</text>
</g>
<g >
<title>pytorch_backend.py:145:smart_copy (8,388,608 bytes, 0.21%)</title><rect x="1159.7" y="69" width="2.5" height="15.0" fill="rgb(240,56,13)" rx="2" ry="2" />
<text  x="1162.70" y="79.5" ></text>
</g>
<g >
<title>pytorch_backend.py:145:smart_copy (8,388,608 bytes, 0.21%)</title><rect x="1092.7" y="69" width="2.5" height="15.0" fill="rgb(231,188,43)" rx="2" ry="2" />
<text  x="1095.69" y="79.5" ></text>
</g>
<g >
<title>all (3,921,674,240 bytes, 100%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(237,130,52)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>flex_opt.py:545:forward (8,388,608 bytes, 0.21%)</title><rect x="167.9" y="85" width="2.5" height="15.0" fill="rgb(244,22,46)" rx="2" ry="2" />
<text  x="170.88" y="95.5" ></text>
</g>
<g >
<title>pytorch_backend.py:138:copy (8,388,608 bytes, 0.21%)</title><rect x="1092.7" y="53" width="2.5" height="15.0" fill="rgb(218,194,0)" rx="2" ry="2" />
<text  x="1095.69" y="63.5" ></text>
</g>
<g >
<title>inactive (480,247,808 bytes, 12.25%)</title><rect x="1045.5" y="213" width="144.5" height="15.0" fill="rgb(237,216,1)" rx="2" ry="2" />
<text  x="1048.50" y="223.5" >inactive</text>
</g>
<g >
<title>flex_opt.py:1038:generation_loop_overlap_single_batch (1,200,196,800 bytes, 30.60%)</title><rect x="684.4" y="117" width="361.1" height="15.0" fill="rgb(233,217,40)" rx="2" ry="2" />
<text  x="687.37" y="127.5" >flex_opt.py:1038:generation_loop_overlap_single_b..</text>
</g>
<g >
<title>pytorch_backend.py:138:copy (8,392,704 bytes, 0.21%)</title><rect x="1162.2" y="53" width="2.5" height="15.0" fill="rgb(225,145,10)" rx="2" ry="2" />
<text  x="1165.22" y="63.5" ></text>
</g>
<g >
<title>pytorch_backend.py:347:mha (33,554,432 bytes, 0.86%)</title><rect x="984.4" y="69" width="10.1" height="15.0" fill="rgb(240,191,47)" rx="2" ry="2" />
<text  x="987.45" y="79.5" ></text>
</g>
<g >
<title>runpy.py:197:_run_module_as_main (323,407,872 bytes, 8.25%)</title><rect x="1092.7" y="197" width="97.3" height="15.0" fill="rgb(254,145,38)" rx="2" ry="2" />
<text  x="1095.69" y="207.5" >runpy.py:19..</text>
</g>
<g >
<title>flex_opt.py:1348:&lt;module&gt; (3,025,787,970 bytes, 77.16%)</title><rect x="135.1" y="165" width="910.4" height="15.0" fill="rgb(244,189,28)" rx="2" ry="2" />
<text  x="138.06" y="175.5" >flex_opt.py:1348:&lt;module&gt;</text>
</g>
<g >
<title>pytorch_backend.py:190:allocate (50,331,648 bytes, 1.28%)</title><rect x="150.2" y="69" width="15.2" height="15.0" fill="rgb(217,55,31)" rx="2" ry="2" />
<text  x="153.21" y="79.5" ></text>
</g>
<g >
<title>pytorch_backend.py:145:smart_copy (33,558,528 bytes, 0.86%)</title><rect x="1179.9" y="69" width="10.1" height="15.0" fill="rgb(227,95,32)" rx="2" ry="2" />
<text  x="1182.90" y="79.5" ></text>
</g>
<g >
<title>flex_opt.py:889:generate (100,663,296 bytes, 2.57%)</title><rect x="135.1" y="133" width="30.3" height="15.0" fill="rgb(217,184,37)" rx="2" ry="2" />
<text  x="138.06" y="143.5" >fl..</text>
</g>
<g >
<title>pytorch_backend.py:138:copy (8,388,608 bytes, 0.21%)</title><rect x="1159.7" y="53" width="2.5" height="15.0" fill="rgb(210,193,44)" rx="2" ry="2" />
<text  x="1162.70" y="63.5" ></text>
</g>
<g >
<title>flex_opt.py:1348:&lt;module&gt; (8,527,984 bytes, 0.22%)</title><rect x="10.0" y="165" width="2.6" height="15.0" fill="rgb(232,176,19)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
</g>
</svg>
